<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>io.twitfic</groupId>
	<artifactId>twitfic-server</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>twitfic-server</name>
	<url>http://maven.apache.org</url>
	
	<dependencies>
	
		<!-- COMPILE SCOPE -->
		<!-- java ee -->
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>7.0</version>
			<scope>compile</scope>
		</dependency>
		<!-- jpa metamodel generation -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>5.0.6.Final</version>
			<scope>compile</scope>
		</dependency>
		<!-- jaxrs json provider: jackson2 (overrides glassfish's jaxb) -->
		<!-- we use jackson2 to (de)serialize entities using jaxb annotations -->
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>2.7.0-rc3</version>
			<scope>compile</scope>
		</dependency>
		
		<!-- TEST SCOPE -->
		<!-- testing: junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<!-- testing: arquillian for in-container tests -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- testing: arquillian adapter for glassfish container -->
		<dependency>
			<groupId>org.jboss.arquillian.container</groupId>
			<artifactId>arquillian-glassfish-embedded-3.1</artifactId>
			<version>1.0.0.CR4</version>
			<scope>test</scope>
		</dependency>
		<!-- testing: embedded glassfish container runtime for arquillian -->
		<!-- glassfish comes with derby (javadb) built in -->
		<dependency>
			<groupId>org.glassfish.main.extras</groupId>
			<artifactId>glassfish-embedded-web</artifactId>
			<version>4.1.1</version>
			<scope>test</scope>
		</dependency>
		<!-- testing: shrinkwrap resolvers to create arquillian deployment using maven coordinates -->
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<scope>test</scope>
			<type>pom</type>
		</dependency>
		<!-- testing: rest-assured for arquillian jaxrs testing -->
		<dependency>
			<groupId>com.jayway.restassured</groupId>
			<artifactId>rest-assured</artifactId>
			<version>2.8.0</version>
			<scope>test</scope>
		</dependency>
		<!-- testing: json schema validation -->
		<dependency>
			<groupId>com.jayway.restassured</groupId>
			<artifactId>json-schema-validator</artifactId>
			<version>2.8.0</version>
			<scope>test</scope>
		</dependency>

	</dependencies>
	
	<build>
		<plugins>
			<!--disable annotation processing for compiler plugin, and-->
			<!--replace with annotation processing from processor plugin with metamodel annotation processing.-->
			<!--this is done to bypass annotation processing errors in maven compiler v2.5.1+-->
			<!--alternative is to simply use maven-compiler-plugin v2.5.1 and remove maven-processor-plugin-->
			<!--https://github.com/mkarneim/pojobuilder/wiki/Incremental-Compilation-and-Maven-->
			<plugin>
				<!-- compile with Java SE 8 -->
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<compilerArgument>-proc:none</compilerArgument>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.bsc.maven</groupId>
				<artifactId>maven-processor-plugin</artifactId>
				<version>2.2.4</version>
				<executions>
					<execution>
						<id>hibernate-jpa-metamodel</id>
						<goals>
							<goal>process</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<processors>
								<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
							</processors>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- version 2.9+ for bugfix: jira.codehaus.org/browse/SUREFIRE-743 -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19</version>
				<configuration>
					<systemPropertyVariables>
						<!-- pass the Java Logging configuration file to the forked
						 Java process to get the SQL logging to work -->
						<java.util.logging.config.file>
							${project.build.testOutputDirectory}/logging.properties
						</java.util.logging.config.file>
						<!-- push derby log to build dir so it gets cleaned -->
						<derby.stream.error.file>
							${project.build.directory}/derby.log
						</derby.stream.error.file>
					</systemPropertyVariables>
				</configuration>
			</plugin>
			<!-- no need for a web.xml -->
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
		</plugins>
		
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
			<testResource>
				<directory>src/test/resources-glassfish-embedded</directory>
			</testResource>
		</testResources>
	</build>
	
	<dependencyManagement>
		<dependencies>
			<!-- testing: shrinkwrap resolver bom -->
			<dependency>
				<groupId>org.jboss.shrinkwrap.resolver</groupId>
				<artifactId>shrinkwrap-resolver-bom</artifactId>
				<version>2.2.1</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<!-- testing: arquillian bom -->
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>1.1.10.Final</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>
</project>
